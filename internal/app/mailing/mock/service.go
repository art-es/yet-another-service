// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/art-es/yet-another-service/internal/app/shared/models"
	gomock "go.uber.org/mock/gomock"
)

// MockmailRepository is a mock of mailRepository interface.
type MockmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmailRepositoryMockRecorder
	isgomock struct{}
}

// MockmailRepositoryMockRecorder is the mock recorder for MockmailRepository.
type MockmailRepositoryMockRecorder struct {
	mock *MockmailRepository
}

// NewMockmailRepository creates a new mock instance.
func NewMockmailRepository(ctrl *gomock.Controller) *MockmailRepository {
	mock := &MockmailRepository{ctrl: ctrl}
	mock.recorder = &MockmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmailRepository) EXPECT() *MockmailRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockmailRepository) Get(ctx context.Context) ([]models.Mail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]models.Mail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockmailRepositoryMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockmailRepository)(nil).Get), ctx)
}

// Save mocks base method.
func (m *MockmailRepository) Save(ctx context.Context, mails []models.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, mails)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockmailRepositoryMockRecorder) Save(ctx, mails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockmailRepository)(nil).Save), ctx, mails)
}

// Mockmailer is a mock of mailer interface.
type Mockmailer struct {
	ctrl     *gomock.Controller
	recorder *MockmailerMockRecorder
	isgomock struct{}
}

// MockmailerMockRecorder is the mock recorder for Mockmailer.
type MockmailerMockRecorder struct {
	mock *Mockmailer
}

// NewMockmailer creates a new mock instance.
func NewMockmailer(ctrl *gomock.Controller) *Mockmailer {
	mock := &Mockmailer{ctrl: ctrl}
	mock.recorder = &MockmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmailer) EXPECT() *MockmailerMockRecorder {
	return m.recorder
}

// MailTo mocks base method.
func (m *Mockmailer) MailTo(address, subject, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MailTo", address, subject, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// MailTo indicates an expected call of MailTo.
func (mr *MockmailerMockRecorder) MailTo(address, subject, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MailTo", reflect.TypeOf((*Mockmailer)(nil).MailTo), address, subject, content)
}
