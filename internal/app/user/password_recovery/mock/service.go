// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/art-es/yet-another-service/internal/app/shared/dto"
	mail "github.com/art-es/yet-another-service/internal/core/mail"
	transaction "github.com/art-es/yet-another-service/internal/core/transaction"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockuserRepository) Find(ctx context.Context, id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockuserRepositoryMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockuserRepository)(nil).Find), ctx, id)
}

// FindByEmail mocks base method.
func (m *MockuserRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockuserRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockuserRepository)(nil).FindByEmail), ctx, email)
}

// Save mocks base method.
func (m *MockuserRepository) Save(ctx context.Context, tx transaction.Transaction, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockuserRepositoryMockRecorder) Save(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockuserRepository)(nil).Save), ctx, tx, user)
}

// MockrecoveryRepository is a mock of recoveryRepository interface.
type MockrecoveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockrecoveryRepositoryMockRecorder
	isgomock struct{}
}

// MockrecoveryRepositoryMockRecorder is the mock recorder for MockrecoveryRepository.
type MockrecoveryRepositoryMockRecorder struct {
	mock *MockrecoveryRepository
}

// NewMockrecoveryRepository creates a new mock instance.
func NewMockrecoveryRepository(ctrl *gomock.Controller) *MockrecoveryRepository {
	mock := &MockrecoveryRepository{ctrl: ctrl}
	mock.recorder = &MockrecoveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrecoveryRepository) EXPECT() *MockrecoveryRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockrecoveryRepository) Delete(ctx context.Context, tx transaction.Transaction, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockrecoveryRepositoryMockRecorder) Delete(ctx, tx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockrecoveryRepository)(nil).Delete), ctx, tx, token)
}

// Find mocks base method.
func (m *MockrecoveryRepository) Find(ctx context.Context, token string) (*models.PasswordRecovery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, token)
	ret0, _ := ret[0].(*models.PasswordRecovery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockrecoveryRepositoryMockRecorder) Find(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockrecoveryRepository)(nil).Find), ctx, token)
}

// Save mocks base method.
func (m *MockrecoveryRepository) Save(ctx context.Context, tx transaction.Transaction, recovery *models.PasswordRecovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, recovery)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockrecoveryRepositoryMockRecorder) Save(ctx, tx, recovery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockrecoveryRepository)(nil).Save), ctx, tx, recovery)
}

// MockrecoveryMailer is a mock of recoveryMailer interface.
type MockrecoveryMailer struct {
	ctrl     *gomock.Controller
	recorder *MockrecoveryMailerMockRecorder
	isgomock struct{}
}

// MockrecoveryMailerMockRecorder is the mock recorder for MockrecoveryMailer.
type MockrecoveryMailerMockRecorder struct {
	mock *MockrecoveryMailer
}

// NewMockrecoveryMailer creates a new mock instance.
func NewMockrecoveryMailer(ctrl *gomock.Controller) *MockrecoveryMailer {
	mock := &MockrecoveryMailer{ctrl: ctrl}
	mock.recorder = &MockrecoveryMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrecoveryMailer) EXPECT() *MockrecoveryMailerMockRecorder {
	return m.recorder
}

// MailTo mocks base method.
func (m *MockrecoveryMailer) MailTo(ctx context.Context, address string, data mail.PasswordRecoveryData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MailTo", ctx, address, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// MailTo indicates an expected call of MailTo.
func (mr *MockrecoveryMailerMockRecorder) MailTo(ctx, address, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MailTo", reflect.TypeOf((*MockrecoveryMailer)(nil).MailTo), ctx, address, data)
}

// MockhashService is a mock of hashService interface.
type MockhashService struct {
	ctrl     *gomock.Controller
	recorder *MockhashServiceMockRecorder
	isgomock struct{}
}

// MockhashServiceMockRecorder is the mock recorder for MockhashService.
type MockhashServiceMockRecorder struct {
	mock *MockhashService
}

// NewMockhashService creates a new mock instance.
func NewMockhashService(ctrl *gomock.Controller) *MockhashService {
	mock := &MockhashService{ctrl: ctrl}
	mock.recorder = &MockhashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashService) EXPECT() *MockhashServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockhashService) Check(str, hashStr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", str, hashStr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockhashServiceMockRecorder) Check(str, hashStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockhashService)(nil).Check), str, hashStr)
}

// Generate mocks base method.
func (m *MockhashService) Generate(str string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", str)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockhashServiceMockRecorder) Generate(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockhashService)(nil).Generate), str)
}
