// Code generated by MockGen. DO NOT EDIT.
// Source: log.go
//
// Generated by this command:
//
//	mockgen -source=log.go -destination=mock/log.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	log "github.com/art-es/yet-another-service/internal/core/log"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error() log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error))
}

// Info mocks base method.
func (m *MockLogger) Info() log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info))
}

// Panic mocks base method.
func (m *MockLogger) Panic() log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Panic")
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic))
}

// Warn mocks base method.
func (m *MockLogger) Warn() log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn")
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn))
}

// With mocks base method.
func (m *MockLogger) With() log.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With")
	ret0, _ := ret[0].(log.Context)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With))
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockEvent) Err(err error) log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockEventMockRecorder) Err(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockEvent)(nil).Err), err)
}

// Msg mocks base method.
func (m *MockEvent) Msg(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Msg", msg)
}

// Msg indicates an expected call of Msg.
func (mr *MockEventMockRecorder) Msg(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockEvent)(nil).Msg), msg)
}

// Send mocks base method.
func (m *MockEvent) Send() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send")
}

// Send indicates an expected call of Send.
func (mr *MockEventMockRecorder) Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEvent)(nil).Send))
}

// Str mocks base method.
func (m *MockEvent) Str(key, val string) log.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Str", key, val)
	ret0, _ := ret[0].(log.Event)
	return ret0
}

// Str indicates an expected call of Str.
func (mr *MockEventMockRecorder) Str(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Str", reflect.TypeOf((*MockEvent)(nil).Str), key, val)
}

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
	isgomock struct{}
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockContext) Err(err error) log.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(log.Context)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err), err)
}

// Logger mocks base method.
func (m *MockContext) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockContextMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockContext)(nil).Logger))
}

// Str mocks base method.
func (m *MockContext) Str(key, val string) log.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Str", key, val)
	ret0, _ := ret[0].(log.Context)
	return ret0
}

// Str indicates an expected call of Str.
func (mr *MockContextMockRecorder) Str(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Str", reflect.TypeOf((*MockContext)(nil).Str), key, val)
}
