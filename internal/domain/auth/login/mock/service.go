// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/art-es/yet-another-service/internal/domain/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockuserRepository) FindByEmail(ctx context.Context, email string) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockuserRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockuserRepository)(nil).FindByEmail), ctx, email)
}

// MockhashChecker is a mock of hashChecker interface.
type MockhashChecker struct {
	ctrl     *gomock.Controller
	recorder *MockhashCheckerMockRecorder
	isgomock struct{}
}

// MockhashCheckerMockRecorder is the mock recorder for MockhashChecker.
type MockhashCheckerMockRecorder struct {
	mock *MockhashChecker
}

// NewMockhashChecker creates a new mock instance.
func NewMockhashChecker(ctrl *gomock.Controller) *MockhashChecker {
	mock := &MockhashChecker{ctrl: ctrl}
	mock.recorder = &MockhashCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashChecker) EXPECT() *MockhashCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockhashChecker) Check(str, hashStr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", str, hashStr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockhashCheckerMockRecorder) Check(str, hashStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockhashChecker)(nil).Check), str, hashStr)
}

// MocktokenGenerator is a mock of tokenGenerator interface.
type MocktokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGeneratorMockRecorder
	isgomock struct{}
}

// MocktokenGeneratorMockRecorder is the mock recorder for MocktokenGenerator.
type MocktokenGeneratorMockRecorder struct {
	mock *MocktokenGenerator
}

// NewMocktokenGenerator creates a new mock instance.
func NewMocktokenGenerator(ctrl *gomock.Controller) *MocktokenGenerator {
	mock := &MocktokenGenerator{ctrl: ctrl}
	mock.recorder = &MocktokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenGenerator) EXPECT() *MocktokenGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MocktokenGenerator) Generate(claims *auth.TokenClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MocktokenGeneratorMockRecorder) Generate(claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MocktokenGenerator)(nil).Generate), claims)
}
