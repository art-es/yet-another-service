// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	mail "github.com/art-es/yet-another-service/internal/core/mail"
	transaction "github.com/art-es/yet-another-service/internal/core/transaction"
	models "github.com/art-es/yet-another-service/internal/domain/shared/models"
	gomock "go.uber.org/mock/gomock"
)

// MockhashGenerator is a mock of hashGenerator interface.
type MockhashGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockhashGeneratorMockRecorder
	isgomock struct{}
}

// MockhashGeneratorMockRecorder is the mock recorder for MockhashGenerator.
type MockhashGeneratorMockRecorder struct {
	mock *MockhashGenerator
}

// NewMockhashGenerator creates a new mock instance.
func NewMockhashGenerator(ctrl *gomock.Controller) *MockhashGenerator {
	mock := &MockhashGenerator{ctrl: ctrl}
	mock.recorder = &MockhashGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashGenerator) EXPECT() *MockhashGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockhashGenerator) Generate(str string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", str)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockhashGeneratorMockRecorder) Generate(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockhashGenerator)(nil).Generate), str)
}

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockuserRepository) Exists(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockuserRepositoryMockRecorder) Exists(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockuserRepository)(nil).Exists), ctx, email)
}

// Save mocks base method.
func (m *MockuserRepository) Save(ctx context.Context, tx transaction.Transaction, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockuserRepositoryMockRecorder) Save(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockuserRepository)(nil).Save), ctx, tx, user)
}

// MockactivationRepository is a mock of activationRepository interface.
type MockactivationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockactivationRepositoryMockRecorder
	isgomock struct{}
}

// MockactivationRepositoryMockRecorder is the mock recorder for MockactivationRepository.
type MockactivationRepositoryMockRecorder struct {
	mock *MockactivationRepository
}

// NewMockactivationRepository creates a new mock instance.
func NewMockactivationRepository(ctrl *gomock.Controller) *MockactivationRepository {
	mock := &MockactivationRepository{ctrl: ctrl}
	mock.recorder = &MockactivationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockactivationRepository) EXPECT() *MockactivationRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockactivationRepository) Save(ctx context.Context, tx transaction.Transaction, activation *models.UserActivation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, activation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockactivationRepositoryMockRecorder) Save(ctx, tx, activation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockactivationRepository)(nil).Save), ctx, tx, activation)
}

// MockactivationMailer is a mock of activationMailer interface.
type MockactivationMailer struct {
	ctrl     *gomock.Controller
	recorder *MockactivationMailerMockRecorder
	isgomock struct{}
}

// MockactivationMailerMockRecorder is the mock recorder for MockactivationMailer.
type MockactivationMailerMockRecorder struct {
	mock *MockactivationMailer
}

// NewMockactivationMailer creates a new mock instance.
func NewMockactivationMailer(ctrl *gomock.Controller) *MockactivationMailer {
	mock := &MockactivationMailer{ctrl: ctrl}
	mock.recorder = &MockactivationMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockactivationMailer) EXPECT() *MockactivationMailerMockRecorder {
	return m.recorder
}

// MailTo mocks base method.
func (m *MockactivationMailer) MailTo(address string, data mail.UserActivationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MailTo", address, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// MailTo indicates an expected call of MailTo.
func (mr *MockactivationMailerMockRecorder) MailTo(address, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MailTo", reflect.TypeOf((*MockactivationMailer)(nil).MailTo), address, data)
}
