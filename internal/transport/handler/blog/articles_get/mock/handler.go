// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mock/handler.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/art-es/yet-another-service/internal/app/shared/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockblogService is a mock of blogService interface.
type MockblogService struct {
	ctrl     *gomock.Controller
	recorder *MockblogServiceMockRecorder
	isgomock struct{}
}

// MockblogServiceMockRecorder is the mock recorder for MockblogService.
type MockblogServiceMockRecorder struct {
	mock *MockblogService
}

// NewMockblogService creates a new mock instance.
func NewMockblogService(ctrl *gomock.Controller) *MockblogService {
	mock := &MockblogService{ctrl: ctrl}
	mock.recorder = &MockblogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblogService) EXPECT() *MockblogServiceMockRecorder {
	return m.recorder
}

// GetArticles mocks base method.
func (m *MockblogService) GetArticles(ctx context.Context, in *dto.GetArticlesIn) (*dto.GetArticlesOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, in)
	ret0, _ := ret[0].(*dto.GetArticlesOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockblogServiceMockRecorder) GetArticles(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockblogService)(nil).GetArticles), ctx, in)
}
