// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mock/handler.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/art-es/yet-another-service/internal/app/shared/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockarticleService is a mock of articleService interface.
type MockarticleService struct {
	ctrl     *gomock.Controller
	recorder *MockarticleServiceMockRecorder
	isgomock struct{}
}

// MockarticleServiceMockRecorder is the mock recorder for MockarticleService.
type MockarticleServiceMockRecorder struct {
	mock *MockarticleService
}

// NewMockarticleService creates a new mock instance.
func NewMockarticleService(ctrl *gomock.Controller) *MockarticleService {
	mock := &MockarticleService{ctrl: ctrl}
	mock.recorder = &MockarticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockarticleService) EXPECT() *MockarticleServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockarticleService) Get(ctx context.Context, in *dto.GetArticlesIn) (*dto.GetArticlesOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, in)
	ret0, _ := ret[0].(*dto.GetArticlesOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockarticleServiceMockRecorder) Get(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockarticleService)(nil).Get), ctx, in)
}
